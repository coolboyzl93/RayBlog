// trie.js

//trie只能收录英文字母，形成了trie之后，trie的层数就是最长的单词的字母数，所以层数应该不会超过20个，
//但是每层的单词数量最多是(26^n)，trie本身并不是二叉树，而是26叉树。从trie的根节点到每个叶子节(也可能不是)
//点所经历
//的字母就会构成一个单词.形成trie的时候，将每个单词都解构成一个一个字符，然后依次插入到trie中去，后面的字母
//成为前面字母的孩子节点，就是这样形成了trie.

//查找操作，与插入操作很类似，先将单词解构为字母，复制一个副本用来检查。每遍历一个字母（一层），
//就和单词本身对应位置的字母进行比较，如果存在，就继续向他的孩子节点接着查，直到所有的对应位置的字母都确认完毕了
//那么就会返回true,如果要统计词频，就让每一个节点都存一个amount，每次插入到这个节点如果停下来了（解构数组为空），
// 那就令amount加1.
